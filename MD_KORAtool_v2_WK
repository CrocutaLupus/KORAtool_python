import shutil;import os;import datetime; import pandas as pd; import piexif; import json; from tqdm import tqdm

#---------- Path info         
#Path_folder = os.path.dirname(__file__)
Path_folder = "E:/MD_KORAtool_V2"

#---------- Create Ouput_Date Folder
TIME=datetime.datetime.today()
directory_output = ["Output",datetime.datetime.now().strftime('%Y-%m-%d_%H-%M-%S')]
directory_output = "_".join(directory_output)
directory_output = os.path.join(Path_folder, directory_output)

#"directory_output" is used in the following step within copytree


#---------- Copy folder structure input
# defining the function to ignore the files
def ignore_files(dir, files):
    return [f for f in files if os.path.isfile(os.path.join(dir, f))]
 
# calling the shutil.copytree() method and
# passing the src,dst,and ignore parameter
shutil.copytree(os.path.join(Path_folder, "images") ,
                directory_output,
                ignore=ignore_files)


#---------- Save Path directory_output
directory_output_paths= [x[0] for x in os.walk(directory_output)]

def subfolders(path_to_parent):
     try:
        return next(os.walk(path_to_parent))[1]
     except StopIteration:
        return []

directory_output_paths = [x for x in directory_output_paths if subfolders(x) ==[]]


#---------- Create Folder Junk and ToCheck in every control folder

lowest_dirs = list()
starting_directory=directory_output
for root,dirs,files in os.walk(starting_directory):
    if not dirs:
        lowest_dirs.append(root)
        
for path in lowest_dirs:
    os.mkdir(os.path.join(path, "Junk"))
    os.mkdir(os.path.join(path, "ToCheck"))

#---------- Sort pictures from ouput to directory_output

#all paths present in ouput (generated by megadetector):    
output_paths= [x[0] for x in os.walk(os.path.join(Path_folder, "output"))]

#start loop sorting

for control in directory_output_paths:
 
    #select film ID to be sorted in the correct folder:  
    film_id = os.path.basename(os.path.normpath(control))

    #select camera associated
    film_id_camera =control.split(os.sep)[-2]

    #select paths in output that concerns film ID
    from_files = [x for x in output_paths if (film_id == x.split(os.sep)[-1] and film_id_camera == x.split(os.sep)[-2])]

    #specify path where pictures should be sorted in directory_output
    film_id_path=control

   
    #sort picture by category
    for x in from_files:
        if "animal_person_vehicle" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/animal_person_vehicle"
            shutil.move(frompath,topath)
        if "animal_person" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/animal_person"
            shutil.move(frompath,topath)
        if "animal_vehicle" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/animal_vehicle"
            shutil.move(frompath,topath)
        if "animals" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/ToCheck/animals"
            shutil.move(frompath,topath)
        if "empty" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/empty"
            shutil.move(frompath,topath)
        if "people" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/people"
            shutil.move(frompath,topath)
        if "person_vehicle" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/person_vehicle"
            shutil.move(frompath,topath)
        if "processing_failure" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/ToCheck/processing_failure"
            shutil.move(frompath,topath)
        if "vehicles" == x.split(os.sep)[-4]:
            frompath = x.replace("\\","/")
            topath = film_id_path.replace("\\","/") + "/Junk/vehicle"
            shutil.move(frompath,topath)

        
#---------- Produce csv with info




#Get all lowerest path
lowest_dirs = list()
starting_directory=directory_output
for root,dirs,files in os.walk(starting_directory):
    if not dirs:
        lowest_dirs.append(root)


#Create Emtpy Table 
Table = {'Path':[],
         'Site':[],
         'Camera':[],
         'Control':[],
         'P_name':[],
         'TIME':[],
         'MD_V5_output':[],
         "Nhumans":[],
         "Conf_MD_max":[]}

Table = pd.DataFrame(Table)


#Fill in information (loop per picture)
for ld in tqdm(lowest_dirs):
    for picture in os.listdir(ld):

        Path= os.path.normpath(os.path.join(ld,picture))
        if "failure" in Path:
            continue
        else:
            exif_dict = piexif.load(Path)
            oth_info = exif_dict['0th']
            TIME = oth_info[306]
            TIME = TIME.decode("utf-8")

            new_row = pd.DataFrame({'Path':[Path],
                    'Site':[Path.split(os.sep)[-6]],
                    'Camera':[Path.split(os.sep)[-5]],
                     'Control':[Path.split(os.sep)[-4]],
                     'P_name':[Path.split(os.sep)[-1]],
                     'TIME':[TIME],
                     'MD_V5_output':[Path.split(os.sep)[-2]],
                     'Nhumans':["NA"],
                     'Conf_MD_max':["NA"]})
        
            Table = pd.concat([Table,new_row])


#Add information about number of humans detected
# read in MD ouput .JSON

dat = json.load(open(os.path.join(Path_folder,"output.json"), "r")) 



#function used in next loop to acess all indices of a list
def get_index_positions(list_of_elems, element):
    ''' Returns the indexes of all occurrences of give element in
    the list- listOfElements '''
    index_pos_list = []
    index_pos = 0
    while True:
        try:
            # Search for item in list from indexPos to the end of list
            index_pos = list_of_elems.index(element, index_pos)
            # Add the index position in list
            index_pos_list.append(index_pos)
            index_pos += 1
        except ValueError as e:
            break
    return index_pos_list      

        
for img in tqdm(range(0,len(dat["images"]))):
        #skip loop if picture was not readable:
        if "failure" in dat["images"][img]:
            continue
        else:
            #Save Info of the picture:
            tmp = dat["images"][img]
            file = tmp["file"]
            det = tmp["detections"]
            #continue only if somthing was detected
            if len(det) != 0:
                #Pool info pictures
                categories=list()
                Conf_MD={}
                for d in range(0,len(det)):
                  tmp2 = det[d]
                  cat = int(tmp2["category"])
                  categories +=str(cat)
                  conf = float(tmp2["conf"])
                  Conf_MD[d]=conf
                #continue only if some humans were detected
                if categories.count("2")>=1:

                    #select only human confidance values
                    indices=get_index_positions(categories, "2")
                    Conf_MD = list(map(Conf_MD. __getitem__, indices))

                    #--- add info to the table Nhumans & confidance for each bbox
                    Table.loc[(Table["Site"] == file.split(os.sep)[-4]) &
                      (Table["Camera"] == file.split(os.sep)[-3]) &
                      (Table["Control"] == file.split(os.sep)[-2]) &
                      (Table["P_name"] == file.split(os.sep)[-1]) ,["Nhumans","Conf_MD_max"]]=[categories.count("2"),"_".join(map(str,Conf_MD))]

            
#Export Table as CSV    
Table.to_csv(os.path.join(directory_output,"Output_MG_V5.csv"))
